!!!
html(lang='en')
  head
    meta(charset='utf-8')
    title MathLex Demo
    link(rel='stylesheet', href='css/normalize.min.css')
    link(rel='stylesheet', href='//fonts.googleapis.com/css?family=Inconsolata')
    link(rel='stylesheet', href='css/style.min.css')

    // attempt to load MathJax from CDN; fall back to local if offline
    script(src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML')
    :coffeescript
      window.MathJax or document.write '<script src="js/libs/MathJax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"><\/script>';
  body
    header
      h1 MathLex
      .version-corner-ribbon: div v1.0
      span.subtitle Math Parser and Renderer <br/>Matthew J. Barry and Philip B. Yasskin
    div(role='main')
      .toolbars
        each palette in palettes
          .ribbon
            .tabs
              strong #{palette.name}:
              each toolbar in palette.toolbars
                a(href='#', data-target='.#{toolbar.name.toLowerCase().replace(/\s+/g, '_')}')= toolbar.name
            each toolbar in palette.toolbars
              .toolbar(class=toolbar.name.toLowerCase().replace(/\s+/g, '_'))
                each buttonGroup in toolbar.buttonGroups
                  div
                    each button in buttonGroup
                      a(href='#', data-content=button.content, title=button.tooltip) \(#{button.label}\)
      .inbox
        a.delete-icon(href='#', title='clear') clear
        textarea#math_input.expand(name='math', placeholder='Enter a mathematical expression...')
      #math_output \[\mathrm{\LaTeX\ Output}\]

      .outbox
        label(for='tex_output') Translated LaTeX Code
        #tex_output: code Output LaTeX Code
      .outbox
        label(for='sage_output') Translated Sage Code <span class="highlight">Incomplete</span>
        #sage_output: code Output Sage Code
      .outbox
        label(for='ast_output') Interpreted Syntax Tree
        #ast_output: code Output Syntax Tree

      h2 Instructions
      p.
        The toolbars above are just for your convenience; there are multiple alternatives for many
        of the symbol and operator token. For example, the "not equal" relation can be written as
        <code>&lt;&gt;</code> (from SQL), <code>!=</code> (traditional), or <code>/=</code> (from
        Haskell). The language is designed to be intuitive, so feel free to experiment. Try finding
        all six keywords for "proper superset".
      p.
        Enter a mathematical expression and watch the rendering and parse tree evolve as you type.
        Please note that no LaTeX/AST output will be rendered until a successful parse. To help
        maximize the frequency of successful parses, the Lexer will attempt to fix unmatched
        delimiters as you type. Also note that some delimiters have more than one formate either
        with or without colons. Namely, absolute value can be written as
        <code class="math">| ... |</code> or <code class="math">|: ... :|</code>, norm can be
        written as <code class="math">|| ... ||</code>, or <code class="math">||: ... :||</code>,
        and vector literals can be surrounded by either <code class="math">&lt; ... &gt;</code> or
        <code class="math">&lt;: ... :&gt;</code>. Delimiters without colons are
        <em>context-aware</em> in that they have different meanings other than as delimiters and
        therefore cannot be automatically matched by the Lexer. Additionally, if an expression is
        opened with one type of delimiter, it must be closed with the same type (i.e. context-aware
        vs. specialized).

      h2 Documentation
      p.
        A comprehensive list of symbols and tokens may be downloaded from
        <a href="doc/Symbols.pdf">here</a> (PDF). More documentation will be made available as this
        project matures.

      h2 Sample Inputs
      p.
        Click on an expression below to use it as the mathematical input above.
      ul
        li Slope-Intercept form:
          code.math: a(href='#math_input') y = m*x + b
        li Quadratic form:
          code.math: a(href='#math_input') a*x^2 + b*x + c = 0
        li Quadratic equation:
          ul
            li Traditional:
              code.math: a(href='#math_input') x = (-b &amp;pm sqrt(b^2 - 4*a*c))/(2*a)
            li Set form:
              code.math: a(href='#math_input') x in {(-b+sqrt(b^2-4*a*c))/(2*a), (-b-sqrt(b^2-4*a*c))/(2*a)}
        li Volume of a Sphere:
          ul
            li: code.math: a(href='#math_input') V = 4/3*#pi*r^3
            li: code.math: a(href='#math_input') V = 2/3*#tau*r^3
        li Integration:
          code.math: a(href='#math_input') &amp;int &amp;_0 &amp;^1 1/(1+x^2) &dx = #p/4
        li Differentiation:
          code.math: a(href='#math_input') diff(arcsin(x), x) = 1/sqrt(1-x^2)
        li Limits:
          ul
            li: code.math: a(href='#math_input') f'(x) = lim((f(x+h)-f(x))/h, h, 0)
            li: code.math: a(href='#math_input') limit((1+r/n)^(t/n), n, infinity) = #e^(r*t)
        li Logarithms:
          code.math: a(href='#math_input') ln(x) = log(x, #e)
        li Sums and Products:
          ul
            li On Relations
              ul
                li: code.math: a(href='#math_input') sum(root(a,3), a in A)
                li: code.math: a(href='#math_input') prod(exp(5/n), n > 3)
            li Over Ranges
              ul
                li: code.math: a(href='#math_input') sum(1/n, n, 0, #infinity) = infinity
                li: code.math: a(href='#math_input') prod(x^2, x, a, b)
        li Vectors:
          ul
            li Unit Vectors:
              code.math: a(href='#math_input') #vi = x*#vi/||x*#vi||
            li Volume of Parallelepiped:
              code.math: a(href='#math_input') V = | &lt;u&amp;_x, u&amp;_y, u&amp;_z&gt; &amp;. &lt;: v&amp;_x, v&amp;_y, v&amp;_z :&gt; &amp;x &lt;w&amp;_x, w&amp;_y, w&amp;_z&gt; |
            li Area of Parallelogram:
              code.math: a(href='#math_input') A = ||: &amp;v v &amp;x &amp;v w :||
        li Logical connectives:
          code.math: a(href='#math_input') p and (q or r) === p &amp;&amp; q || p &amp;&amp; r
        li Definition of the <em>subset</em> relation:
          code.math: a(href='#math_input') A subset B &lt;-&gt; a in A implies a in B
        li Definition of Big-Oh (notice two different forms for "absolute value"): <br/>
          code.math: a(href='#math_input') f(x) in O(g(x)) iff exists x&amp;_0 in #Z : exists C in #R : forall x&gt;x&amp;_0 -&gt; |f(x)| &lt;= C*|: g(x) :|
        li Ranges:
          ul
            li Open:
              code.math: a(href='#math_input') x = [: a, b :]
            li Closed:
              code.math: a(href='#math_input') x = (: a, b :)
            li Half-Open:
              code.math: a(href='#math_input') x = [: a, #infinity :)
        li Lists:
          code.math: a(href='#math_input') [ #pi, #e, #gamma ]
    footer
      p Copyright &copy;2012 Matthew J. Barry. All rights reserved.
      p.
        <img src="images/nsf.gif" width="32" valign="middle" alt="National Science Foundation Logo" />
        Supported in part by NSF DUE CCLI / TUES Grants
        <a href="http://nsf.gov/awardsearch/showAward.do?AwardNumber=0737209">#0737209</a> /
        <a href="http://nsf.gov/awardsearch/showAward.do?AwardNumber=1123170">#1123170</a> (Meade) and
        <a href="http://nsf.gov/awardsearch/showAward.do?AwardNumber=0737248">#0737248</a> /
        <a href="http://nsf.gov/awardsearch/showAward.do?AwardNumber=1123255">#1123255</a> (Yasskin)
      p LaTeX Rendered by <a href="http://www.mathjax.org">MathJax</a>.

    script(src='../build/browser/mathlex.js')

    // attempt to load jQuery from Google CDN; fall back to local if offline
    script(src='https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js')
    :coffeescript
      window.jQuery or document.write '<script src="js/libs/jquery-1.7.1.min.js"><\/script>';
    script(src='js/jquery.textarea-expander.js')
    script(src='js/cursor.js')
    :coffeescript
      CURSOR_ID = '{%-CURSOR-%}'

      $(document).ready ->
        mathInput  = $ '#math_input'
        mathOutput = $ '#math_output'
        astOutput  = $ '#ast_output'
        sageOutput = $ '#sage_output'
        rawOutput  = $ '#tex_output'
        mjQueue  = MathJax.Hub.queue
        mjOutBox   = null

        mjQueue.Push -> mjOutBox = MathJax.Hub.getAllJax('math_output')[0]

        class ParserProxy
          constructor: -> @memo = {}
          parse: (mlCode) ->
            if mlCode of @memo then @memo[mlCode]
            else @memo[mlCode] = MathLex.parse(mlCode);

        pp = new ParserProxy()

        updateMath = (math) ->
          mathOutput.css {color: '#000'}

          try
            if math.length > 0
              # attempt to parse input and display LaTeX
              ast = pp.parse math
              latex = MathLex.render ast, 'latex'
              mjQueue.Push ['Text', mjOutBox, "\\displaystyle{#{latex}}"]
              rawOutput.html "<pre>#{latex}<\/pre>"
              astOutput.html "<pre>#{MathLex.render ast, 'text-tree'}<\/pre>"
              sageOutput.html "<pre>#{MathLex.render ast, 'sage'}<\/pre>"
            else
              mjQueue.Push ['Text', mjOutBox, "\\displaystyle{\\mathrm{\\LaTeX\\ Output}}"]
              rawOutput.html '<code>Raw LaTeX Output<\/code>'
              astOutput.html '<code>Parse Tree<\/code>'
              sageOutput.html '<code>Sage Output<\/code>'
          catch err
            # if we encounter a parse error, change color of output box
            mathOutput.css {color: '#f00'}
            throw err

        $('code.math a').on 'click', (evt) ->
          math = $(@).text()
          mathInput.val math
          updateMath math

        # keyup binding to input text box
        mathInput.on 'keyup', (evt) -> updateMath $(@).val()
        mathInput.val ''
        #mathInput.focus()

        # clear button
        $('a.delete-icon').on 'click', (evt) ->
          evt.preventDefault()
          mathInput.val ''
          mathInput.TextAreaExpander();
          updateMath ''

        # toolbars
        $('.toolbars .ribbon .tabs a').on 'click', (evt) ->
          evt.preventDefault()
          thiz = $ @
          thiz.toggleClass('open').parent().siblings(thiz.data('target')).toggleClass('open').slideToggle(200)

        $('.toolbar a[data-content]').on 'click', (evt) ->
          evt.preventDefault()
          element = document.getElementById('math_input')
          math = $(@).data('content')

          # is there a cursor position?
          cursorOffset = math.indexOf CURSOR_ID
          math = math.replace CURSOR_ID, ''

          insertPos = insertAtCursor element, math, false

          cursorOffset = math.length if cursorOffset <= 0
          setCursorPosition element, insertPos + cursorOffset

          updateMath mathInput.val()
