function ExpressionBuilder(){}ExpressionBuilder.prototype=new ExpressionBuilderInterface();function buildUnaryExpression(a,b){b.parent=a;a.child=b;return a}function buildBinaryExpression(c,b,a){b.parent=c;a.parent=c;c.left=b;c.right=a;return c}ExpressionBuilder.prototype.newPlus=function(b,a){return buildBinaryExpression(new PlusExpression(),b,a)};ExpressionBuilder.prototype.newMinus=function(b,a){return buildBinaryExpression(new MinusExpression(),b,a)};ExpressionBuilder.prototype.newTimes=function(b,a){return buildBinaryExpression(new TimesExpression(),b,a)};ExpressionBuilder.prototype.newDivide=function(b,a){return buildBinaryExpression(new DivideExpression(),b,a)};ExpressionBuilder.prototype.newExponent=function(b,a){return buildBinaryExpression(new ExponentExpression(),b,a)};ExpressionBuilder.prototype.newSubscript=function(b,a){return buildBinaryExpression(new SubscriptExpression(),b,a)};ExpressionBuilder.prototype.newParentheses=function(a){return buildUnaryExpression(new ParenthesesExpression(),a)};ExpressionBuilder.prototype.newNegation=function(a){return buildUnaryExpression(new NegationExpression(),a)};ExpressionBuilder.prototype.newNumber=function(a){return new NumberExpression(a)};ExpressionBuilder.prototype.newVariable=function(a){return new VariableExpression(a)};ExpressionBuilder.prototype.newConstant=function(a){return new ConstantExpression(a)};function ExpressionBuilderInterface(){}ExpressionBuilderInterface.prototype.newPlus=function(b,a){console.log("ExpressionBuilderInterface.newPlus() is not implemented")};ExpressionBuilderInterface.prototype.newMinus=function(b,a){console.log("ExpressionBuilderInterface.newMinus() is not implemented")};ExpressionBuilderInterface.prototype.newTimes=function(b,a){console.log("ExpressionBuilderInterface.newTimes() is not implemented")};ExpressionBuilderInterface.prototype.newDivide=function(b,a){console.log("ExpressionBuilderInterface.newDivide() is not implemented")};ExpressionBuilderInterface.prototype.newExponent=function(b,a){console.log("ExpressionBuilderInterface.newExponent() is not implemented")};ExpressionBuilderInterface.prototype.newSubscript=function(b,a){console.log("ExpressionBuilderInterface.newSubscript() is not implemented")};ExpressionBuilderInterface.prototype.newParentheses=function(a){console.log("ExpressionBuilderInterface.newParentheses() is not implemented")};ExpressionBuilderInterface.prototype.newNegation=function(a){console.log("ExpressionBuilderInterface.newNegation() is not implemented")};ExpressionBuilderInterface.prototype.newNumber=function(a){console.log("ExpressionBuilderInterface.newNumber() is not implemented")};ExpressionBuilderInterface.prototype.newVariable=function(a){console.log("ExpressionBuilderInterface.newVariable() is not implemented")};ExpressionBuilderInterface.prototype.newConstant=function(a){console.log("ExpressionBuilderInterface.newConstant() is not implemented")};function BinaryExpression(){this.left=null;this.right=null}BinaryExpression.prototype=new Expression();function ConstantExpression(a){this.name=a}ConstantExpression.prototype=new Expression();ConstantExpression.prototype.accept=function(a){a.visitConstant(this)};function DivideExpression(){}DivideExpression.prototype=new BinaryExpression();DivideExpression.prototype.accept=function(a){a.visitDivide(this)};function ExponentExpression(){}ExponentExpression.prototype=new BinaryExpression;ExponentExpression.prototype.accept=function(a){a.visitExponent(this)};function Expression(){this.parent=null}Expression.prototype.accept=function(a){console.log("Expression.accept() not implemented")};function MinusExpression(){}MinusExpression.prototype=new BinaryExpression();MinusExpression.prototype.accept=function(a){a.visitMinus(this)};function NegationExpression(){}NegationExpression.prototype=new BinaryExpression();NegationExpression.prototype.accept=function(a){a.visitNegation(this)};function NumberExpression(a){this.value=a}NumberExpression.prototype=new Expression();NumberExpression.prototype.accept=function(a){a.visitNumber(this)};function ParenthesesExpression(){}ParenthesesExpression.prototype=new UnaryExpression();ParenthesesExpression.prototype.accept=function(a){a.visitParentheses(this)};function PlusExpression(){}PlusExpression.prototype=new BinaryExpression();PlusExpression.prototype.accept=function(a){a.visitPlus(this)};function SubscriptExpression(){}SubscriptExpression.prototype=new BinaryExpression();SubscriptExpression.prototype.accept=function(a){a.visitSubscript(this)};function TimesExpression(){}TimesExpression.prototype=new BinaryExpression();TimesExpression.prototype.accept=function(a){a.visitTimes(this)};function UnaryExpression(){this.child=null}UnaryExpression.prototype=new Expression();function VariableExpression(a){this.name=a}VariableExpression.prototype=new Expression();VariableExpression.prototype.accept=function(a){a.visitVariable(this)};function Parser(a){this.builder=a}Parser.prototype.parse=function(a){this.tokens=a;return this.parseSum()};Parser.prototype.parseSum=function(){var b=this.parseTerm();var a=this.tokens.getNext();switch(a.type){case TokenType.PLUS:return this.builder.newPlus(b,this.parseSum());case TokenType.MINUS:return this.builder.newMinus(b,this.parseSum());default:this.tokens.putBack(a);return b}};Parser.prototype.parseTerm=function(){var b=this.parseNegation();var a=this.tokens.getNext();switch(a.type){case TokenType.TIMES:return this.builder.newTimes(b,this.parseTerm());case TokenType.DIVIDE:return this.builder.newDivide(b,this.parseTerm());default:this.tokens.putBack(a);return b}};Parser.prototype.parseNegation=function(){var a=this.tokens.getNext();if(a.type==TokenType.MINUS){return this.bulder.newNegation(this.parseFactor())}else{this.tokens.putBack(a);return this.parseFactor()}};Parser.prototype.parseFactor=function(){var b=this.parsePrimary();var a=this.tokens.getNext();switch(a.type){case TokenType.CARET:return this.builder.newExponent(b,this.parseNegation());case TokenType.UNDERSCORE:return this.builder.newSubscript(b,this.parseNegation());default:this.tokens.putBack(a);return b}};Parser.prototype.parsePrimary=function(){var b=this.tokens.getNext();var a;switch(b.type){case TokenType.LPAREN:a=this.builder.newParentheses(this.parseSum());if(this.tokens.getNext().type!=TokenType.RPAREN){throw"Expected "+TokenType.RPAREN+" token."}return a;case TokenType.NUMBER:return this.builder.newNumber(parseFloat(b.value));case TokenType.CONSTANT:return this.builder.newConstant(b.value);case TokenType.VARIABLE:return this.builder.newVariable(b.value);default:this.tokens.putBack(b);throw"Expected primary token"}};function Token(a,b){this.type=a;b=b?b:a;this.value=b}var TokenType={UNKNOWN:"?",PLUS:"+",MINUS:"-",TIMES:"*",DIVIDE:"/",CARET:"^",UNDERSCORE:"_",LPAREN:"(",RPAREN:")",NUMBER:"1",CONSTANT:"#",VARIABLE:"x",END_OF_INPUT:""};function Tokenizer(){this.input=this.currPos=this.tokens=null}Tokenizer.prototype.tokenize=function(a){this.input=a;this.currPos=0;this.tokens=new Array();var b;while(this.currPos<this.input.length){b=this.input[this.currPos];if(b.match(/[\*\/\+\-\^\_\(\)\#]/)){this.tokenizeOperator()}else{if(b.match(/[\d\.]/)){this.tokenizeNumber()}else{if(b.match(/[a-zA-Z]/)){this.tokenizeSymbol()}else{this.tokenizeCharacter()}}}}this.tokens.push(new Token(TokenType.END_OF_INPUT))};Tokenizer.prototype.tokenizeOperator=function(){var a,b;for(type in TokenType){if(TokenType[type].length>1){a=this.currPos+TokenType[type].length;if(this.input.substring(this.currPos,a)==TokenType[type]){this.tokens.push(new Token(type));this.currPos+=TokenType[type].length;return}}}if(this.input[this.currPos]=="#"){this.tokenizeSymbol()}else{this.tokenizeCharacter()}};Tokenizer.prototype.tokenizeNumber=function(){var a=this.currPos;while(this.currPos<this.input.length&&this.input[this.currPos].match(/[\w\.]/)){this.currPos++}this.tokens.push(new Token(TokenType.NUMBER,this.input.substring(a,this.currPos)))};Tokenizer.prototype.tokenizeSymbol=function(){var a=TokenType.VARIABLE;if(this.input[this.currPos]=="#"){a=TokenType.CONSTANT;this.currPos++}if(!this.input[this.currPos].match(/[a-zA-Z]/)){this.tokenizeCharacter(TokenType.UNKNOWN);return}var b=this.currPos;while(this.currPos<this.input.length&&this.input[this.currPos].match(/[a-zA-Z]/)){this.currPos++}this.tokens.push(new Token(a,this.input.substring(b,this.currPos)))};Tokenizer.prototype.tokenizeCharacter=function(a){a=a?a:this.input[this.currPos];this.tokens.push(new Token(a,this.input[this.currPos]));this.currPos++};Tokenizer.prototype.hasNext=function(){return(this.tokens.length>0)};Tokenizer.prototype.getNext=function(){var a=this.tokens.shift();return a};Tokenizer.prototype.putBack=function(a){this.tokens.unshift(a)};function ExpressionVisitor(){}ExpressionVisitor.prototype.visitPlus=function(a){console.log("visitPlus not implemented")};ExpressionVisitor.prototype.visitMinus=function(a){console.log("visitMinus not implemented")};ExpressionVisitor.prototype.visitTimes=function(a){console.log("visitTimes not implemented")};ExpressionVisitor.prototype.visitDivide=function(a){console.log("visitDivide not implemented")};ExpressionVisitor.prototype.visitExponent=function(a){console.log("visitExponent not implemented")};ExpressionVisitor.prototype.visitSubscript=function(a){console.log("visitSubscript not implemented")};ExpressionVisitor.prototype.visitParentheses=function(a){console.log("visitParentheses not implemented")};ExpressionVisitor.prototype.visitNegation=function(a){console.log("visitNegation not implemented")};ExpressionVisitor.prototype.visitNumber=function(a){console.log("visitNumber not implemented")};ExpressionVisitor.prototype.visitVariable=function(a){console.log("visitVariable not implemented")};ExpressionVisitor.prototype.visitConstant=function(a){console.log("visitConstant not implemented")};function LatexTranslator(){this.latex="";this.specialVarNames={alpha:"\\alpha",beta:"\\beta",gamma:"\\gamma",Gamma:"\\Gamma",delta:"\\delta",Delta:"\\Delta",epsilon:"\\varepsilon",zeta:"\\zeta",eta:"\\eta",theta:"\\theta",Theta:"\\Theta",kappa:"\\kappa",lambda:"\\lambda",Lambda:"\\Lambda",mu:"\\mu",nu:"\\nu",xi:"\\xi",Xi:"\\Xi",omicron:"o",pi:"\\pi",Pi:"\\Pi",rho:"\\rho",sigma:"\\sigma",Sigma:"\\Sigma",tau:"\\tau",upsilon:"\\upsilon",Upsilon:"\\Upsilon",phi:"\\varphi",Phi:"\\Phi",chi:"\\chi",psi:"\\psi",Psi:"\\Psi",omega:"\\omega",Omega:"\\Omega"};this.constants={pi:"\\pi",p:"\\p",i:"i",e:"\\mathrm{e}",vi:"\\hat\\imath",vj:"\\hat\\jmath",vk:"\\hat{k}",v0:"\\vec{0}",one:"\\mathbf{1}",zero:"\\mathbf{0}",infinity:"\\infty","null":"\\emptyset",gamma:"\\gamma",N:"\\mathbb{N}",Z:"\\mathbb{Z}",Q:"\\mathbb{Q}",R:"\\mathbb{R}",C:"\\mathbb{C}",}}LatexTranslator.prototype=new ExpressionVisitor();LatexTranslator.prototype.visitPlus=function(a){a.left.accept(this);this.latex+="+";a.right.accept(this)};LatexTranslator.prototype.visitMinus=function(a){a.left.accept(this);this.latex+="-";a.right.accept(this)};LatexTranslator.prototype.visitTimes=function(a){var b="{\\cdot}";if(a.left instanceof VariableExpression||a.right instanceof VariableExpression||a.left instanceof ConstantExpression||a.right instanceof ConstantExpression||a.right instanceof ParenthesesExpression){b=""}a.left.accept(this);this.latex+=b;a.right.accept(this)};LatexTranslator.prototype.visitDivide=function(a){this.latex+="\\frac{";a.left.accept(this);this.latex+="}{";a.right.accept(this);this.latex+="}"};LatexTranslator.prototype.visitExponent=function(a){a.left.accept(this);this.latex+="^{";a.right.accept(this);this.latex+="}"};LatexTranslator.prototype.visitSubscript=function(a){a.left.accept(this);this.latex+="^{";a.right.accept(this);this.latex+="}"};LatexTranslator.prototype.visitParentheses=function(a){if(a.parent instanceof DivideExpression){a.child.accept(this)}else{this.latex+="\\left(";a.child.accept(this);this.latex+="\\right)"}};LatexTranslator.prototype.visitNegation=function(a){this.latex+="-";a.child.accept(this)};LatexTranslator.prototype.visitNumber=function(a){this.latex+=a.value+""};LatexTranslator.prototype.visitVariable=function(a){if(undefined!==this.specialVarNames[a.name]){this.latex+="{"+this.specialVarNames[a.name]+"}"}else{this.latex+=a.name}};LatexTranslator.prototype.visitConstant=function(a){if(undefined!==this.constants[a.name]){this.latex+="{"+this.constants[a.name]+"}"}else{this.latex+="\\#"+a.name}};