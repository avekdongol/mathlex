extends layout

block append vars
  prev_page = {href: 'language.html', title: 'MathLex Language Specification'}
  next_page = {href: 'tokens.html', title: 'Appendix A: List of All Recognized Symbols and Tokens'}

block append title
  | - Building from Source

block article
  h1 Section Index
  nav.toc
    ul
      li: a(href='#requirements-and-dependencies') Requirements and Dependencies
      li: a(href='#build-instructions') Build Instructions
      li: a(href='#writing-your-own-translator') Writing Your own Translator

  section#building-from-source
    h1 Building from Source

    p.
      Although it is open source, MathLex is currently copyrighted and cannot be used in
      any project without explicit permission. It will eventually be made available under a
      non-commercial, free-use license (such as BSD, MIT, Apache, or Creative Commons).
    .two-alt.cols.border
      .col: p.note.
          <strong>NOTE:</strong> MathLex is distributed in a precompiled, optimized, and minified JS
          file. Building MathLex from source should not be necessary unless you know what you are
          doing and need/want to make changes.
      .col.align-center: a.download(data-icon!='&#59156;', href='#{path_prefix}src/mathlex.zip', download='mathlex-source.zip') Download Source Code

    section#requirements-and-dependencies
      h2 Requirements and Dependencies
      p.
        For simplicity, this documentation assumes you are using a UNIX (including Mac
        OS X) or GNU/Linux environment and are familiar with basic JavaScript and CoffeeScript programming.

      p Make sure you have the following applications and libraries installed:
      ul
        li.
          <a href="http://nodejs.org" target="_blank">Node.js</a> with the following modules:
          <a href="http://coffeescript.org" target="_blank">CoffeeScript</a>,
          <a href="http://handlebarsjs.com" target="_blank">Handlebars</a>,
          <a href="http://zaach.github.com/jison" target="_blank">Jison</a>, and
          <a href="http://github.com/mishoo/UglifyJS2" target="_blank">UglifyJS</a>
        li.
          <a href="http://ruby-lang.org" target="_blank">Ruby</a> with the <a href="compass-style.org" target="_blank">Compass</a> gem.

    section#build-instructions
      h2 Build Instructions
      p.
        Download and extract the MathLex source code. MathLex is written in CoffeeScript files located
        in the <code>src</code> directory. These files are easier to read and understand than their
        compiled JavaScript counterparts.

      p Type the following into your console to run the automated build script (the <code>%</code> represents your prompt and should be ignored)

      pre(class='brush: shell').
        % cd /path/to/mathlex-source
        % make

      p.
        The compiled JS files will be written to <code>build/browser</code>. Individual components
        will be saved to the <code>build</code> directory and mimic the structure of the CoffeeScript
        files.

    section#writing-your-own-translator
      h2 Writing Your own Translator

      p.
        Translators or renderers are nothing more than recursive tree iterators. In other words,
        they perform an action at each tree node by calling itself for each of that node's children.
        For example, a translator for the simple expression tree <code>['Plus', ['Literal', 'Int', 5],
        ['Literal', 'Int', 10]]</code> could be evaluated with the following simple function:

      pre(class='brush: js').
        var evalExpression = function (tree) {
          if (tree[0] === 'Literal') {
            // return the value of the node to the previous level
            return tree[2];
          } else if (tree[0] === 'Plus') {
            // return the sum of each child node to the previous level
            return evalExpression(tree[1]) + evalExpression(tree[2]);
          } else {
            // tree node ID is not known
            var message = 'unknown tree node: ' + tree[0];
            console.log(message);
            throw message;
          }
        }

      p Or equivalently,

      pre(class='brush: js').
        var evalExpression = function (tree) {
          switch (tree[0]) {
            case 'Literal':
              return tree[2];
            case 'Plus':
              return evalExpression(tree[1]) + evalExpression(tree[2]);
            default:
              var message = 'unknown tree node: ' + tree[0];
              console.log(message);
              throw message;
          }
        }

      p.
        Notice how the function calls itself in the <tt>if (tree[0] === 'Plus')</tt> case to
        determine the value of each child node before adding them together. Writing large
        <code>if</code> or <code>switch</code> statements in JavaScript can be messy due to all the
        extra syntax, so I recommend using <a href="http://coffeescript.org" target="_blank">CoffeeScript</a>
        instead:

      pre(class='brush: coffeescript').
        evalExpression = (tree) -> switch tree[0]
          when 'Literal' then tree[2]
          when 'Plus' then evalExpression(tree[1]) + evalExpression(tree[2])
          else
            message = "unknown tree node: \#{tree[0]}"
            console.log message

      p.
        Your language choice does not matter since CoffeeScript will be compiled into JavaScript
        anyway. Before you start writing, you need to do some initial setup.

      section#initial-setup Initial Setup
        h3 Initial Setup

block javascripts
  script(src='#{path_prefix}javascripts/lib/syntaxhighlighter/scripts/XRegExp.js')
  script(src='#{path_prefix}javascripts/lib/syntaxhighlighter/scripts/shCore.js')
  script(src='#{path_prefix}javascripts/lib/syntaxhighlighter/scripts/shAutoloader.js')
