extends layout

block append vars
  prev_page = {href: 'language.html', title: 'Language Specification'}
  next_page = {href: 'building.html', title: ''}

block article
  h1#how-mathlex-works How MathLex Works

  p.
    MathLex works in two phases. The first phase compiles a MathLex expression into an Abstract Syntax Tree (AST) that
    can be represented in memory, and the second phase converts the AST into some type of output.

  h2#ml2tree MathLex &rarr; Syntax Tree

  p.
    When provided with a valid MathLex string, <code>MathLex.parse()</code> produces an <em>abstract syntax tree
    (AST)</em> representing the inferred value of the MathLex code.

  p.
    The AST is built from different "node" types represented as a recursive array. Every node has at least one element
    (i.e. the 0<sup>th</sup> element or <code>node[0]</code> in JS) that is a string indicator of the type of node. <a
      href="tree-nodes.html">Appendix B</a> lists all possible nodes and their structure.

  p.
    Under the hood, MathLex has two components: a Tokenizer and a Parser.

  p.
    The <strong>Tokenizer</strong> is responsible for translating the characters in the MathLex input string into a list
    of <em>Tokens</em>, a way to group related characters into a single symbol. For example, "<code>&lt;=</code>" is
    shorthand for "less than or equal to" (in display math, '&le;') and is comprised of two separate characters. The
    Tokenizer groups these characters into a <code>TLessEqual</code> for the parser.

  p.
    The <strong>Parser</strong> then reads the list of tokens and assembles the corresponding abstract syntax tree (AST)
    based on the rules in <code>src/grammar.coffee</code>. The parser code itself is generated by
    <a href="http://zaach.github.com/jison" target="_blank">Jison</a> and for most purposes is unreadable.

  h2#tree2output Syntax Tree &rarr; Output

  p.
    The AST returned by the parser gives a mathematically faithful model of the meaning behind the interpreted input
    text. Therefore a recursive postorder traversal (evaluating child sub-nodes and then performing the operation) will
    result in a correct answer.

  p.
    Tools to recursively "evaluate" the AST are called <strong>Translators</strong> or <strong>Renderers</strong>. Each
    term can be used interchangeably for the purposes of this thesis.

  // TODO: Tree and Evaluator
