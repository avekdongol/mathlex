extends ../layout

block append vars
  page_id = 'doc'
  path_prefix = '../'

block append title
  | - Documentation

block content
  h1 Table of Contents
  ul
    li Appendices
      ol(type='A')
        li: a(href='tokens.html') List of Tokens
        li: a(href='tree-nodes.html') List of Syntax Nodes

  h1 Building from Source
  p.
    While open source, MathLex is currently copyrighted and cannot be used in
    any project without explicit permission. It will eventually be made available under a free-use
    license (such as BSD, MIT, Apache, or Creative Commons).
  .two-alt.cols.border
    .col: p.note.
        <strong>NOTE:</strong> MathLex is distributed in a precompiled, optimized, and minified JS
        file. Building MathLex from source should not be necessary unless you know what you are
        doing and need/want to make changes.
    .col.align-center: a.download(data-icon='&#59156;', href='#{path_prefix}src/mathlex.zip') Download Source Code

  h2 Requirements and Dependencies
  p.
    For simplicity, this documentation assumes you are using a UNIX (including Mac
    OS X) or GNU/Linux environment and are familiar with basic JavaScript and CoffeeScript programming.

  p Make sure you have the following applications and libraries installed:
  ul
    li.
      <a href="http://nodejs.org" target="_blank">Node.js</a> with the following modules:
      <a href="http://coffeescript.org" target="_blank">CoffeeScript</a>,
      <a href="http://handlebarsjs.com" target="_blank">Handlebars</a>,
      <a href="http://zaach.github.com/jison" target="_blank">Jison</a>, and
      <a href="http://github.com/mishoo/UglifyJS2" target="_blank">UglifyJS</a>
    li.
      <a href="http://ruby-lang.org" target="_blank">Ruby</a> with the <a href="compass-style.org" target="_blank">Compass</a> gem.

  h2 Build Instructions
  p.
    Download and extract the MathLex source code. MathLex is written in CoffeeScript files located
    in the <code>src</code> directory. These files are easier to read and understand than their
    compiled JavaScript counterparts.

  p Type the following into your console to run the automated build script (the <code>%</code> represents your prompt and should be ignored)
  pre(class='brush: shell').
    % cd /path/to/mathlex-source
    % make
  p.
    The compiled JS files will be written to <code>build/browser</code>. Individual components
    will be saved to the <code>build</code> directory and mimic the structure of the CoffeeScript
    files


  h1#how-mathlex-works How MathLex Works

  p.
    When provided with a valid MathLex string, <code>MathParser.parse()</code> produces an <em>abstract
    syntax tree (AST)</em> representing the explicit, inferred value of the MathLex code. This representative
    tree is built from different "node" types represented as a recursive array. Every node has at
    least one element (i.e. the 0<sup>th</sup> element or <code>node[0]</code> in JS) that is a
    string indicator of the type of node. <a href="tree-nodes.html">Appendix B</a> lists all possible
    nodes and their structure.

  p.
    Under the hood, MathLex has two components: a Tokenizer and a Parser. The <strong>Tokenizer</strong>
    is responsible for translating the characters in the MathLex input string into a list of <em>Tokens</em>,
    a way to group related characters into a single symbol. For example, "<code>&lt;=</code>"
    is shorthand for "less than or equal to" (in display math, '&le;') and is comprised of two separate
    characters. The Tokenizer groups these characters into a <code>TLessEqual</code> for the parser.

  p.
    The <strong>Parser</strong> then reads the list of tokens and assembles the corresponding abstract
    syntax tree (AST) based on the rules in <code>src/grammar.coffee</code>. The parser code
    itself is generated by <a href="http://zaach.github.com/jison" target="_blank">Jison</a> and
    for most purposes is unreadable.


block javascripts
  script(src='#{path_prefix}javascripts/lib/syntaxhighlighter/scripts/XRegExp.js')
  script(src='#{path_prefix}javascripts/lib/syntaxhighlighter/scripts/shCore.js')
  script(src='#{path_prefix}javascripts/lib/syntaxhighlighter/scripts/shAutoloader.js')
