!!!5
html(lang='en')
  head
    meta(charset='utf-8')
    title MathLex | Documentation
    link(rel='stylesheet', href='stylesheets/style.css')

  body.dark
    a#power-button
      span.screen-reader-text Toggle light and dark theme
      span.icon.icon-only(data-icon='&#128161;', aria-hidden='true')
    header
      h1 MathLex
        .subtitle A Web-Based Mathematical Entry System
      nav: ul
        li: a(href='index.html'): span Home
        li: a(href='quick-start.html'): span Quick-Start
        li.current: a.current(href='doc.html'): span Documentation
        li: a(href='demo.html'): span Demo
    article
      h1 Building from Source
      .cols
        .left
          p.note.
            <strong>NOTE:</strong> MathLex is distributed in a precompiled, optimized, and minified JS
            file. Building MathLex from source should not be necessary unless you know what you are
            doing and need/want to make changes.
        .right
          a.download(data-icon='&#59156;', href='src/mathlex.zip') Source Code

      h2 Requirements and Dependencies
      p Make sure you have the following applications and libraries installed:
      ul
        li.
          <a href="http://nodejs.org" target="_blank">Node.js</a> with the following modules:
          <a href="http://coffeescript.org" target="_blank">CoffeeScript</a>,
          <a href="http://handlebarsjs.com" target="_blank">Handlebars</a>,
          <a href="http://zaach.github.com/jison" target="_blank">Jison</a>, and
          <a href="http://github.com/mishoo/UglifyJS2" target="_blank">UglifyJS</a>
        li.
          <a href="http://ruby-lang.org" target="_blank">Ruby</a> with the <a href="compass-style.org" target="_blank">Compass</a> gem.

      h2 Build Instructions
      p.
        Download and extract the MathLex source code. MathLex is written in CoffeeScript files located
        in the <code>src</code> directory. These files are easier to read and understand than their
        compiled JavaScript counterparts.

      p Type the following into your console to run the automated build script:
      pre(class='brush: shell')
        % cd /path/to/mathlex-source
        % make
      p.
        The compiled JS files will be written to <code>build/browser</code>. Individual components
        will be saved to the <code>build</code> directory and mimic the structure of the CoffeeScript
        files


      h1#how-mathlex-works How MathLex Works

      p.
        When provided with a valid MathLex string, <code>MathParser.parse()</code> produces an <em>abstract
        syntax tree (AST)</em> representing the explicit, inferred value of the MathLex code. This representative
        tree is built from different "node" types represented as a recursive array. Every node has at
        least one element (i.e. the 0<sup>th</sup> element or <code>node[0]</code> in JS) that is a
        string indicator of the type of node. <a href="#appendix-b">Appendix B</a> lists all possible
        nodes and their structure.

      p.
        Under the hood, MathLex has two components: a Tokenizer and a Parser. The <strong>Tokenizer</strong>
        is responsible for translating the characters in the MathLex input string into a list of <em>Tokens</em>,
        a way to group related characters into a single symbol. For example, "<code>&lt;=</code>"
        is shorthand for "less than or equal to" (in display math, '&le;') and is comprised of two separate
        characters. The Tokenizer groups these characters into a <code>TLessEqual</code> for the parser.

      p.
        The <strong>Parser</strong> then reads the list of tokens and assembles the corresponding abstract
        syntax tree (AST) based on the rules in <code>src/grammar.coffee</code>. The parser code
        itself is generated by <a href="http://zaach.github.com/jison" target="_blank">Jison</a> and
        for most purposes is unreadable.




      h1#appendix-a Appendix A: List of All Recognized Symbols and Tokens
      p: em TODO: symbols and tokens

      h1#appendix-b Appendix B: List of All Syntax Tree Nodes
      p.
        This is a comprehensive list of all math operations that MathLex recognizes. In JavaScript,
        each node is represented as an Array, the 0<sup>th</sup> index of which is a string ID.
        Any additional information is stored in the indices as described by each node type below.

      p: em TODO: node types

    footer
      p Copyright &copy; 2012 Matthew Barry. All rights reserved.
      p MathLex is to be used for testing purposes only. It is not to be used in any product without explicit permission from the author.

    script(src='javascripts/lib/syntaxhighlighter/scripts/XRegExp.js')
    script(src='javascripts/lib/syntaxhighlighter/scripts/shCore.js')
    script(src='javascripts/lib/syntaxhighlighter/scripts/shAutoloader.js')
    script(src='http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js')
    script(src='javascripts/main.js')
