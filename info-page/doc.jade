!!!5
html(lang='en')
  head
    meta(charset='utf-8')
    title MathLex | Documentation
    link(rel='stylesheet', href='stylesheets/style.css')

  body.dark
    a#power-button
      span.screen-reader-text Toggle light and dark theme
      span.icon.icon-only(data-icon='&#128161;', aria-hidden='true')
    header
      h1 MathLex
        .subtitle A Web-Based Mathematical Entry System
      nav: ul
        li: a(href='index.html'): span Home
        li: a(href='quick-start.html'): span Quick-Start
        li.current: a.current(href='doc.html'): span Documentation
        li: a(href='demo.html'): span Demo
    article
      h1 Building from Source
      .two.cols.border
        .col: p.note.
            <strong>NOTE:</strong> MathLex is distributed in a precompiled, optimized, and minified JS
            file. Building MathLex from source should not be necessary unless you know what you are
            doing and need/want to make changes.
        .col.align-center: a.download(data-icon='&#59156;', href='src/mathlex.zip') Source Code

      h2 Requirements and Dependencies
      p Make sure you have the following applications and libraries installed:
      ul
        li.
          <a href="http://nodejs.org" target="_blank">Node.js</a> with the following modules:
          <a href="http://coffeescript.org" target="_blank">CoffeeScript</a>,
          <a href="http://handlebarsjs.com" target="_blank">Handlebars</a>,
          <a href="http://zaach.github.com/jison" target="_blank">Jison</a>, and
          <a href="http://github.com/mishoo/UglifyJS2" target="_blank">UglifyJS</a>
        li.
          <a href="http://ruby-lang.org" target="_blank">Ruby</a> with the <a href="compass-style.org" target="_blank">Compass</a> gem.

      h2 Build Instructions
      p.
        Download and extract the MathLex source code. MathLex is written in CoffeeScript files located
        in the <code>src</code> directory. These files are easier to read and understand than their
        compiled JavaScript counterparts.

      p Type the following into your console to run the automated build script:
      pre(class='brush: shell')
        % cd /path/to/mathlex-source
        % make
      p.
        The compiled JS files will be written to <code>build/browser</code>. Individual components
        will be saved to the <code>build</code> directory and mimic the structure of the CoffeeScript
        files


      h1#how-mathlex-works How MathLex Works

      p.
        When provided with a valid MathLex string, <code>MathParser.parse()</code> produces an <em>abstract
        syntax tree (AST)</em> representing the explicit, inferred value of the MathLex code. This representative
        tree is built from different "node" types represented as a recursive array. Every node has at
        least one element (i.e. the 0<sup>th</sup> element or <code>node[0]</code> in JS) that is a
        string indicator of the type of node. <a href="#appendix-b">Appendix B</a> lists all possible
        nodes and their structure.

      p.
        Under the hood, MathLex has two components: a Tokenizer and a Parser. The <strong>Tokenizer</strong>
        is responsible for translating the characters in the MathLex input string into a list of <em>Tokens</em>,
        a way to group related characters into a single symbol. For example, "<code>&lt;=</code>"
        is shorthand for "less than or equal to" (in display math, '&le;') and is comprised of two separate
        characters. The Tokenizer groups these characters into a <code>TLessEqual</code> for the parser.

      p.
        The <strong>Parser</strong> then reads the list of tokens and assembles the corresponding abstract
        syntax tree (AST) based on the rules in <code>src/grammar.coffee</code>. The parser code
        itself is generated by <a href="http://zaach.github.com/jison" target="_blank">Jison</a> and
        for most purposes is unreadable.




      h1#appendix-a Appendix A: List of All Recognized Symbols and Tokens
      table
        thead: tr
          th Token
          th Description
          th Recognized Symbol(s)
        tbody
          tr
            td: span.token TIdent
            td Identifier (variable or function name)
            td.
              A letter followed by zero or more letters, numbers, or underscores
              (e.g. <code>x Fn example_ident p2</code>)
          tr
            td: span.token TFloatLit
            td Literal decimal number and/or scientific notation
            td.
              Any number with a decimal point or 'e' somewhere in it
              (e.g. <code>0.3 -.125 3.14 6.02e23 1.602E-19</code>)
          tr
            td: span.token TIntLit
            td Integer
            td.
              One or more decimal digits
              (e.g. <code>1234 095 42 7</code>)
          tr
            td: span.token TConstant
            td A special identifier that has a numeric value
            td.
              Usually preceded by a <code>#</code> sign, but some keywords are recognized.
              See the <a href="#list-of-constants">list of constants</a> below.
          tr
            td: span.token TQForall
            td Universal Quantification ("for all")
            td: code forall
          tr
            td: span.token TQExists
            td Existential Quantification ("there exists")
            td: code exists
          tr
            td: span.token TQUnique
            td Unique Quantification ("there exists a unique")
            td: code unique
          tr
            td: span.token TIff
            td Biconditional Logical Operator ("if and only if")
            td: code &lt;-&gt; iff
          tr
            td: span.token TImplies
            td Conditional Logical Operator ("implies", "if-then")
            td: code -&gt; implies
          tr
            td: span.token TIf
            td Reverse Conditional Logical Operator ("implied by")
            td: code &lt;- if when whenever
          tr
            td: span.token TThen
            td Keyword used for parsing "if-then" implication
            td: code then
          tr
            td: span.token TAnd
            td Logical Conjunction
            td: code and &amp;&amp;
          tr
            td: span.token TOr
            td Logical Disjunction
            td: code or ||
          tr
            td: span.token TXor
            td Logical Exclusive-Or
            td: code xor
          tr
            td: span.token TNot
            td Logical Negation
            td: code not
          tr
            td: span.token TTilde
            td Tilde Character (used for negation and similarity)
            td: code ~
          tr
            td: span.token TLess
            td "Less Than" Relation Operator
            td: code &lt;
          tr
            td: span.token TLessEqual
            td "Less Than or Equal" Relation Operator
            td: code &lt;=
          tr
            td: span.token TEquiv
            td "Equivalent" Relation Operator
            td: code| === equiv
          tr
            td: span.token TNotEquiv
            td "Not Equivalent" Relation Operator
            td: code !== /== nequiv
          tr
            td: span.token TCongruent
            td "Congruent" Relation Operator
            td: code ~= congruent
          tr
            td: span.token TSimilar
            td "Similar To" Relation Operator
            td: code similar sim
          tr
            td: span.token TEqual
            td "Equal To" Relation Operator (for algebraic expressions)
            td: code| = ==
          tr
            td: span.token TNotEqual
            td "Not Equal To" Relation Operator (for algebraic expressions)
            td: code != /= &lt;&gt;
          tr
            td: span.token TRatioEqual
            td Equal Relation Operator for ratios ("[a is to b] as [c is to d]")
            td: code as
          tr
            td: span.token TParallel
            td "Parallel To" Relation Operator
            td: code parallel para
          tr
            td: span.token TPerpendicular
            td "Perpendicular To" Relation Operator
            td: code perpendicular perp
          tr
            td: span.token TGreaterEqual
            td "Greater Than or Equal To" Relation Operator
            td: code &gt;=
          tr
            td: span.token TGreater
            td "Greater Than" Relation Operator
            td: code &gt;
          tr
            td: span.token TSubset
            td Subset Relation Operator
            td: code subset
          tr
            td: span.token TPropSubset
            td Proper Subset Relation Operator
            td: code propersubset propsubset psubset
          tr
            td: span.token TSuperset
            td Superset Relation Operator
            td: code superset supset
          tr
            td: span.token TPropSuperset
            td Proper Superset Relation Operator
            td: code propersuperset propersupset propsuperset propsupset psuperset psupset
          tr
            td: span.token TIn
            td Inclusion Relation Operator
            td: code in
          tr
            td: span.token TPipe
            td Vertical Bar Character
            td: code |
          tr
            td: span.token TDivides
            td Divisibility Relation Operator
            td: code divides
          tr
            td: span.token TNotDivides
            td Negation of Divisibility Relation
            td: code !| ndivides ndivide notdivides notdivide
          tr
            td: span.token TUnion
            td Set Union Operator
            td: code union
          tr
            td: span.token TIntersect
            td Set Intersection Operator
            td: code intersect
          tr
            td: span.token TSetDiff
            td Set difference Operator
            td: code \\
          tr
            td: span.token TPlus
            td Addition
            td: code +
          tr
            td: span.token TMinus
            td Subtraction
            td: code -
          tr
            td: span.token TPlusMinus
            td "Plus or Minus"
            td: code &amp;pm +/-
          tr
            td: span.token TMinusPlus
            td "Minus or Plus"
            td: code &amp;mp -/+
          tr
            td: span.token TTimes
            td Multiplication
            td: code *
          tr
            td: span.token TDivide
            td Division
            td: code /
          tr
            td: span.token TSlash
            td Alternate "slash" division notation
            td: code &amp;/
          tr
            td: span.token TRatio
            td Rational comparison
            td: code ::
          tr
            td: span.token TModulus
            td Modular Arithmetic Operator
            td: code mod %
          tr
            td: span.token TExponent
            td Exponentiation/Power
            td: code ^ **
          tr
            td: span.token TSuperscript
            td Superscript Index Selector
            td: code &amp;^
          tr
            td: span.token TSubscript
            td Subscript Index Selector
            td: code &amp;_
          tr
            td: span.token TBang
            td Exclamation Point
            td: code !
          tr
            td: span.token TPrime
            td Differentiation Notation
            td: code '
          tr
            td: span.token TDotDiff
            td Alternate Differentiation Notation
            td: code.
              .
          tr
            td: span.token TCompose
            td Function Composition Operator
            td: code @
          tr
            td: span.token TReal
            td Real Part Filter Operator
            td: code &amp;Re
          tr
            td: span.token TImaginary
            td Imaginary Part Filter Operator
            td: code &amp;Im
          tr
            td: span.token TPartial
            td Partial Differential "D"
            td: code &amp;pd
          tr
            td: span.token TDifferential
            td Differential "D"
            td: code &amp;d
          tr
            td: span.token TChangeDelta
            td Difference Operator
            td: code &amp;D
          tr
            td: span.token TGradient
            td Gradient Operator ("del" or "grad")
            td: code &amp;del &amp;grad
          tr
            td: span.token TDivergence
            td Divergence Operator ("div")
            td: code &amp;del. &amp;div
          tr
            td: span.token TCurl
            td Curl Operator ("curl")
            td: code &amp;delx &amp;curl
          tr
            td: span.token TCross
            td Cross Product Operator
            td: code &amp;x
          tr
            td: span.token TDot
            td Dot Product Operator
            td: code &amp;.
          tr
            td: span.token TWedge
            td Wedge Product Operator
            td: code &amp;w
          tr
            td: span.token TTensor
            td Tensor Product Operator
            td: code &amp;ox
          tr
            td: span.token TDirectSum
            td Direct Sum Operator
            td: code &amp;o+
          tr
            td: span.token TCartesianProduct
            td Cartesian Product Operator
            td: code &amp;*
          tr
            td: span.token TVectorizer
            td The boldface style or arrow over a vector variable
            td: code &amp;v
          tr
            td: span.token TUnitVectorizer
            td Unit vector "hat" over a vector variable
            td: code &amp;u
          tr
            td: span.token TIntegral
            td Integration Symbol
            td: code integral Integral int Int &amp;integral &amp;Integral &amp;int &amp;Int
          tr
            td: span.token TLParen
            td Left (Open) Parenthesis
            td: code (
          tr
            td: span.token TRParen
            td Right (Close) Parenthesis
            td: code )
          tr
            td: span.token TLCurlyBrace
            td Left (Open) Curly Brace
            td: code {
          tr
            td: span.token TRCurlyBrace
            td Right (Close) Curly Brace
            td: code }
          tr
            td: span.token TLSqBracket
            td Left (Open) Square Bracket
            td: code [
          tr
            td: span.token TRSqBracket
            td Right (Close) Square Bracket
            td: code ]
          tr
            td: span.token TLRangeInclusive
            td Left Delimiter for Inclusive Range
            td: code [:
          tr
            td: span.token TRRangeInclusive
            td Right Delimiter for Inclusive Range
            td: code :]
          tr
            td: span.token TLRangeExclusive
            td Left Delimiter for Exclusive Range
            td: code (:
          tr
            td: span.token TRRangeExclusive
            td Right Delimiter for Exclusive Range
            td: code :)
          tr
            td: span.token TLPipe
            td Left Pipe Delimiter
            td: code |:
          tr
            td: span.token TRPipe
            td Right Pipe Delimiter
            td: code :|
          tr
            td: span.token TLDoublePipe
            td Left Double-Pipe ("Norm") Delimiter
            td: code ||:
          tr
            td: span.token TRDoublePipe
            td Right Double-Pipe ("Norm") Delimiter
            td: code :||
          tr
            td: span.token TLVector
            td Left Angle Bracket
            td: code &lt;:
          tr
            td: span.token TRVector
            td Right Angle Bracket
            td: code :&gt;
          tr
            td: span.token TColon
            td Colon Character
            td: code :
          tr
            td: span.token TSemicolon
            td Semi-Colon Character
            td: code ;
          tr
            td: span.token TComma
            td Comma separator
            td: code ,

      h2#list-of-constants List of Constants
      table
        thead: tr
          th Constant
          th Description
        tbody
          tr
            td: code #T #true true
            td Boolean constant <strong>True</strong>
          tr
            td: code #F #false false
            td Boolean constant <strong>False</strong>
          tr
            td: code #t
            td: a(href='http://tauday.com', target='_blank') &tau; = 2 &pi; &asymp; 6.28318
          tr
            td: code #p #pi
            td &pi; &asymp; 3.14159
          tr
            td: code #e
            td e &asymp; 2.71828
          tr
            td: code #infinity infinity
            td: span.error #!ERROR: memory overflow
          tr
            td: code #N
            td Set of Natural Numbers
          tr
            td: code #Z
            td Set of Integers
          tr
            td: code #Q
            td Set of Rational Numbers
          tr
            td: code #R
            td Set of Real Numbers
          tr
            td: code #C
            td Set of Complex Numbers
          tr
            td: code #H
            td Set of Quaternion Numbers
          tr
            td: code #O
            td Set of Octonian Numbers
          tr
            td: code #U
            td Universal Set
          tr
            td: code #v0
            td Zero Vector
          tr
            td: code #vi #ui
            td <em>x</em>-axis unit vector
          tr
            td: code #vj #uj
            td <em>y</em>-axis unit vector
          tr
            td: code #vk #uk
            td <em>z</em>-axis unit vector
          tr
            td: code #0
            td Zero Matrix
          tr
            td: code #1
            td One Matrix
          tr
            td: code #I
            td Identity Matrix




      h1#appendix-b Appendix B: List of All Syntax Tree Nodes
      p.
        This is a comprehensive list of all math operations that MathLex recognizes. In JavaScript,
        each node is represented as an Array, the 0<sup>th</sup> index of which is a string ID.
        Any additional information is stored in the indices as described by each node type below.
      p Note that most of the tree nodes correspond to their <a href="#appendix-a">operator tokens</a>.

      dl.nodes
        dt: span.node Empty
        dt: span.node Equivalent
          span lhs
          span rhs
        dt: span.node Iff
          span lhs
          span rhs
        dt: span.node Implies
          span hypothesis
          span conclusion
          span syntax_used
        dd.
          <code>systax_used</code> is a boolean variable indicating whether the "implies" (true)
          or "implied by" (false) syntax was used
        dt: span.node Or
          span lhs
          span rhs
        dt: span.node Xor
          span lhs
          span rhs
        dt: span.node And
          span lhs
          span rhs
        dt: span.node Not
          span clause
        dt: span.node Forall
          span relation
          span quantified_statement
        dt: span.node Exists
          span relation
          span quantified_statement
        dt: span.node Unique
          span relation
          span quantified_statement
        dt: span.node Equal
          span lhs
          span rhs
        dt: span.node NotEqual
          span lhs
          span rhs
        dt: span.node RatioEqual
          span lhs
          span rhs
        dt: span.node Congruent
          span lhs
          span rhs
        dt: span.node Similar
          span lhs
          span rhs
        dt: span.node Parallel
          span lhs
          span rhs
        dt: span.node Perpendicular
          span lhs
          span rhs
        dt: span.node Less
          span lhs
          span rhs
        dt: span.node LessEqual
          span lhs
          span rhs
        dt: span.node GreaterEqual
          span lhs
          span rhs
        dt: span.node Greater
          span lhs
          span rhs
        dt: span.node Subset
          span lhs
          span rhs
        dt: span.node Superset
          span lhs
          span rhs
        dt: span.node ProperSubset
          span lhs
          span rhs
        dt: span.node ProperSuperset
          span lhs
          span rhs
        dt: span.node Inclusion
          span lhs
          span rhs
        dt: span.node Divides
          span lhs
          span rhs
        dt: span.node NotDivides
          span lhs
          span rhs
        dt: span.node Ratio
          span lhs
          span rhs
        dt: span.node PlusMinus
          span lhs
          span rhs
        dt: span.node MinusPlus
          span lhs
          span rhs
        dt: span.node Plus
          span lhs
          span rhs
        dt: span.node Minus
          span lhs
          span rhs
        dt: span.node Times
          span lhs
          span rhs
        dt: span.node Divide
          span lhs
          span rhs
        dt: span.node Modulus
          span lhs
          span rhs
        dt: span.node Exponent
          span lhs
          span rhs
        dt: span.node Superscript
          span lhs
          span rhs
        dt: span.node Subscript
          span lhs
          span rhs
        dt: span.node DotProduct
          span lhs
          span rhs
        dt: span.node CrossProduct
          span lhs
          span rhs
        dt: span.node WedgeProduct
          span lhs
          span rhs
        dt: span.node TensorProduct
          span lhs
          span rhs
        dt: span.node Compose
          span lhs
          span rhs
        dt: span.node Union
          span lhs
          span rhs
        dt: span.node Intersection
          span lhs
          span rhs
        dt: span.node SetDiff
          span lhs
          span rhs
        dt: span.node DirectSum
          span lhs
          span rhs
        dt: span.node CartesianProduct
          span lhs
          span rhs
        dt: span.node PosNeg
          span expr
        dt: span.node NegPos
          span expr
        dt: span.node Positive
          span expr
        dt: span.node Negative
          span expr
        dt: span.node Vectorizer
          span expr
        dt: span.node UnitVectorizer
          span expr
        dt: span.node Partial
          span expr
        dt: span.node Differential
          span expr
        dt: span.node Change
          span expr
        dt: span.node Gradient
          span expr
        dt: span.node Divergence
          span expr
        dt: span.node Curl
          span expr
        dt: span.node Factorial
          span expr
        dt: span.node Prime
          span expr
        dt: span.node DotDiff
          span expr
        dt: span.node Function
          span func_builder
          span arguments
        dt: span.node Variable
          span name
        dt: span.node Literal
          span type
          span value
        dd <code>type</code> is either 'Int' or 'Float'
        dt: span.node Constant
          span name
        dt: span.node Vector
          span components
        dt: span.node Bra
          span expr
        dt: span.node Ket
          span expr
        dt: span.node BraKet
          span lhs
          span rhs
        dt: span.node List
          span elements
        dt: span.node Range
          span left_inclusive
          span lower_bound
          span upper_bound
          span right_inclusive
        dd <code>left_inclusive</code> and <code>right_inclusive</code> parameters are boolean values
        dt: span.node AbsVal
          span expr
        dt: span.node Norm
          span expr
        dt: span.node Parentheses
          span expr
        dt: span.node Integral
          span expr
          span differential
          span bounds
        dd <code>bounds</code> is a JS object containing a <code>lo</code> index, <code>hi</code> index, both, or none
        dt: span.node EmptySet
        dt: span.node Set
          span components
        dt: span.node SetBuilder
          span build_expr
          span predicates

    footer
      p Copyright &copy; 2012 Matthew Barry. All rights reserved.
      p MathLex is to be used for testing purposes only. It is not to be used in any product without explicit permission from the author.

    script(src='javascripts/lib/syntaxhighlighter/scripts/XRegExp.js')
    script(src='javascripts/lib/syntaxhighlighter/scripts/shCore.js')
    script(src='javascripts/lib/syntaxhighlighter/scripts/shAutoloader.js')
    script(src='http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js')
    script(src='javascripts/main.js')
