!!!5
html(lang='en')
  head
    meta(charset='utf-8')
    title MathLex
    link(rel='stylesheet', href='stylesheets/style.css')
    link(rel='stylesheet', href='syntaxhighlighter_3.0.83/styles/shCoreRDark.css')

  body
    header
      h1 MathLex
        .subtitle A Web-Based Mathematical Entry System
      nav: ul
        li.current: a.current(href='index.html'): span Home
        li: a(href='doc.html'): span Documentation
    article
      .cols
        .left
          p.
            MathLex is a quick and easy way to start accepting math input on your
            website. Just download the <code>mathlex.js</code> file and follow the
            <a href="#quick-start">quick start</a> instructions below.
        .right
          a.download(data-icon='&#59256;', href='javascripts/mathlex.js') Download

      h2#quick-start Quick Start
      p.
        Include the MathLex JS file in your HTML with the following code. I recommend putting
        JavaScripts just before the closing <code>&lt;/body&gt;</code> tag, but you can put it in your
        <code>&lt;head&gt;</code> or wherever works best for you.
      pre(class='brush: html') &lt;script src="/path/to/mathlex.js"&gt;&lt;/script&gt;
      p Now suppose you have an input field somewhere in your <code>&lt;body&gt;</code>:
      pre(class='brush: html') &lt;input type="text" id="#math-input" /&gt;
      p.
        The value of this text field is easy to obtain. For example, one of the following
        methods could be used in a <code>&lt;script&gt;</code> tag in your page's HTML or in
        a separate JS file:
      pre(class='brush: js').
        // standard JS:
        var mathText = document.getElementById('math-input').value;

        // or jQuery (see http://jquery.com):
        var mathText = $('#math-input').val();

        // or whatever your preferred framework's procedure is...
      p.
        <code>mathText</code> is now the name of this value, but you can use whatever name you want
        (as long as it's not a <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Reserved_Words" target="_blank">reserved keyword</a>).
        Once you have math input code, pass it to the <code>parse()</code> method of the global
        <code>MathParser</code> object.
      pre(class='brush: js') var syntaxTree = MathParser.parse(mathText);
      p This will give back an abstract syntax tree which can then be passed to the <code>render()</code> method.

      p There are currently three renderers included by default:
      ul
        li.
          <code>latex</code>: for use in typesetting (perhaps using
          <a href="#mathjax-integration">MathJax</a>.)
        li.
          <code>sage</code> (about 80% complete): Input language for the open source
          <a href="http://www.sagemanth.org" target="_blank">Sage computer algebra system</a>.
        li.
          <code>text-tree</code>: outputs a plain text indented tree representation of the abstract
          syntax tree (intended for debugging purposes).
      p Here is a sample use case for each renderer:
      pre(class='brush: js').
        var latexCode = MathParser.render(syntaxTree, 'latex');
        var sageCode  = MathParser.render(syntaxTree, 'sage');
        var treeCode  = MathParser.render(syntaxTree, 'text-tree');

      h3#mathjax-integration MathJax Integration
      p Suppose you have the following tag for rendering LaTeX output with <a href="http://www.mathjax.org" target="_blank">MathJax</a>:
      pre(class='brush: html') &lt;div id="math-output"&gt;\[ \]&lt;/div&gt;
      p The following JavaScript code can be used to dynamically update the display field above:
      pre(class='brush: js').
        // get MathJax runtime information on page load
        var mjQueue = MathJax.Hub.queue;
        var mjOutBox;

        mjQueue.Push(function () {
          mjOutBox = MathJax.Hub.getAllJax('math-output')[0];
        });

        // update math-output MathJax object
        // this should be in a callback function (i.e. when there's new latexCode to display)
        mjQueue.Push(['Text', mjOutBox, latexCode]);

      p Need more help? <a href="doc.html">Read the full documentation</a>.

    footer
      p Copyright &copy; 2012 Matthew Barry. All rights reserved.
      p MathLex is to be used for testing purposes only.

    script(src='syntaxhighlighter_3.0.83/scripts/shCore.js')
    script(src='syntaxhighlighter_3.0.83/scripts/shAutoloader.js')
    :coffeescript
      path = (args...) ->
        arg.replace '@', 'syntaxhighlighter_3.0.83/scripts/' for arg in args

      SyntaxHighlighter.autoloader.apply null, path(
        'html @shBrushXml.js'
        'js @shBrushJScript.js'
      )

      SyntaxHighlighter.all()
