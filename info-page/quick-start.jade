extend layout

block vars
  page_id = 'quickstart'

block append title
  | - Quick Start

block stylesheets
  style
    #mathlex-sample { text-align: center; font-size: 0.8em; }
    #mathlex-sample #math-display, #mathlex-sample #math-output { border: 1px solid #000; margin: 5px 0; }
    #mathlex-sample h1, #mathlex-sample h2 { border: none; text-align: inherit; margin: 5px 0; }
    #mathlex-sample input[type='text'] { width: 80%; }
    #mathlex-sample input[type='button'] {
      -webkit-appearance: push-button;
      box-shadow: 0 0 3px rgba(0, 0, 0, 0.7);
    }


block content
  p.
    This page is meant to be a 10-minute crash-course on how to use the MathLex JavaScript library.
    In the process, you will learn how to produce a sample page called <code>mathlexsample.html</code>,
    which contains a simple numerical calculator. For more information, please visit the
    <a href="doc.html">full documentation</a>.

  h1#quick-start Quick Start

  .two.cols.border
    .col: p.
      <em>Step 1</em>: Download the MathLex Javascript file, <code>mathlex.js</code>, by right-clicking
      on the button at the right and saving the linked file in a location that is accessible from
      the page in a web browser (<code>/path/to/mathlex.js</code>). In our sample page, it is located
      in the <code>javascripts</code> subfolder <em>relative</em> to the same folder as the
      <code>mathlexsample.html</code> page (thus we can omit the leading <code>/</code>), so its path
      is <code>javascripts/mathlex.js</code>.
    .col.align-center: a.download(data-icon='&#59256;', href='javascripts/mathlex.js', download='mathlex') Download

  .two.cols.border
    .col
      p.
        <em>Step 2</em>: A MathLex sample page is shown at the right. To pop it out,
        <a href="quick-start/mathlexsample.html" target="_blank">click here</a>.
      p.
        This page contains a simple numerical calculator. There is an input box where a student can
        enter a formula which may be as complicated as desired, but must evaluate to a pure number.
        Then there is a preview window where the student can see what they have typed. When the student
        clicks the Calculate button, the formula is sent to a Sage processor which returns the value, which
        is displayed in the output window.
      p.
        The code for this page is listed below, and each part will be explained in the sections to
        follow. If you would like to code along with me, you can create files on your computer
    .col
      #mathlex-sample
        h1 MathLex Sample
        h2 A Simple Calculator
        input#math-input(type='text', placeholder='Type math here')
        #math-display \[ \]
        input#send-math(type='button', value='Calculate')
        #math-output \[ \]

  pre(class='brush: js; html-script: true').
    <!DOCTYPE html>
    <html lang="en">
      <head>
        <meta charset="utf-8">
        <title>MathLex Sample</title>
        <style>
          body { text-align: center; }
          #math-display, #math-output { border: 1px solid #000; margin: 5px 0; }
        </style>
      </head>
      <body>
        <h1>MathLex Sample</h1>
        <h2>A Simple Calculator</h2>
        <input id="math-input" type="text" placeholder="Type math here">
        <div id="math-display">\[ \]</div>
        <input id="send-math" type="button" value="Send to Sage">
        <div id="math-output">\[ \]</div>

        <script src="javascripts/mathlex.js"></script>
        <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script>
        <script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
        <script>
          $(document).ready(function () {
            // get MathJax output object
            var mjDisplayBox, mjOutBox;
            MathJax.Hub.Queue(function () {
              mjDisplayBox = MathJax.Hub.getAllJax('math-display')[0];
              mjOutBox = MathJax.Hub.getAllJax('math-output')[0];
            });

            // "live update" MathJax whenever a key is pressed
            $('#math-input').on('keyup', function (evt) {
              var math = $(this).val();
              $(this).css('color', 'black');

              if (math.length > 0) {
                try {
                  var tree = MathLex.parse(math),
                      latex = MathLex.render(tree, 'latex');
                  MathJax.Hub.Queue(['Text', mjDisplayBox, latex]);
                } catch (err) {
                  $(this).css('color', 'red');
                }
              } else {
                // clear display and output boxes if input is empty
                MathJax.Hub.Queue(['Text', mjDisplayBox, '']);
                MathJax.Hub.Queue(['Text', mjOutBox, '']);
              }
            });

            // send output to sage server
            $('#send-math').on('click', function (evt) {
              var math = $('#math-input').val();
              if (math.length > 0) {
                try {
                  var tree = MathLex.parse(math),
                      sageCode = MathLex.render(tree, 'sage');
                  $.post('http://aleph.sagemath.org/service?callback=?',
                         { code: 'print latex('+sageCode+')' }, function (data) {
                    // AJAX success callback
                    if (data.success) {
                      MathJax.Hub.Queue(['Text', mjOutBox, data.stdout]);
                    } else {
                      MathJax.Hub.Queue(['Text', mjOutBox, '\\text{Sage could not understand that input}']);
                    }
                  });
                } catch (err) {
                  MathJax.Hub.Queue(['Text', mjOutBox, '\\text{Check your syntax and try again}']);
                }
              }
            });
          });
        </script>
      </body>
    </html>

  offset = 12
  initOffset = offset
  p.
    <em>Step 3</em>: The following HTML snippet creates the screen layout. Lines #{offset} and #{offset+1} create a header,
    line #{offset+2} makes the input field, line #{offset+3} produces a preview window that will be
    rendered by MathJax, line #{offset+4} makes the submit button, and line #{offset+5} creates the
    output window that will also be rendered by MathJax.

  pre(class='brush: html; first-line: #{offset}').
    <h1>MathLex Sample</h1>
    <h2>A Simple Calculator</h2>
    <input type="text" id="math-input" placeholder="Type math here" />
    <div id="math-display">\[ \]</div>
    <input type="button" id="send-math" value="Submit to Sage" />
    <div id="math-output">\[ \]</div>

  offset = offset + 7
  p.
    <em>Step 4</em>: To be able to process the math input, you need to include the MathLex JavaScript
    file in your HTML. I recommend putting JavaScripts just before the closing <code>&lt;/body&gt;</code>
    tag, but you can put it in your <code>&lt;head&gt;</code> or wherever works best for you. Of course
    the <code>src</code> attribute should be replaced by the appropriate path to your MathLex
    JavaScript file.

  pre(class='brush: html; first-line: #{offset}') <script src="javascripts/mathlex.js"></script>

  offset = offset + 1
  p.
    <em>Step 5</em>: If you plan to use <a href="http://www.mathjax.org/download" target="_blank">MathJax</a>,
    <a href="http://jquery.com" target="_blank">jQuery</a>,
    <a href="http://mootools.net/download" target="_blank">MooTools</a>,
    <a href="http://prototypejs.org/download" target="_blank">Prototype</a>,
    <a href="http://yuilibrary.com/yui/quick-start" target="_blank">YUI</a>,
    <a href="http://dojotoolkit.org/download" target="_blank">Dojo</a>, or another JavaScript
    toolkit/library, please refer to the corresponding site for installation instructions. Lines #{offset}
    and #{offset+1} of the example code load jQuery and MathJax from their respective Content Distribution
    Network (CDN) URLs:

  pre(class='brush: html; first-line: #{offset}').
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script>
    <script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

  p.
    <em>Step 6</em>: The math input from line #{initOffset+2} is processed in two ways:
  ol
    li It is automatically parsed and rendered into the math display window on line #{initOffset+3}
    li.
      It is passed to the Sage processor when the Calculate button on line #{initOffset+4} is clicked.
      The result returned by Sage is rendered by MathJax into the math output window on line #{initOffset+5}.

  offset = offset + 4
  p.
    The first thing we need to do is define the MathJax output objects, <code>mjDisplayBox</code> and
    <code>mjOutBox</code>, which tell MathJax where to put the output, namely the <code>math-display</code>
    box on line #{initOffset+3} and the <code>math-output</code> box on line #{initOffset+5}. This is
    done in lines #{offset} to #{offset+5}.

  pre(class='brush: js; first-line: #{offset}').
    // get MathJax output object
    var mjDisplayBox, mjOutBox;
    MathJax.Hub.Queue(function () {
      mjDisplayBox = MathJax.Hub.getAllJax('math-display')[0];
      mjOutBox = MathJax.Hub.getAllJax('math-output')[0];
    });

  offset = offset + 7
  p.
    <em>Step 7</em>: To automatically parse the <code>math-input</code> from line #{initOffset+3}, we
    use jQuery's DOM event handling systems in lines #{offset}&ndash;#{offset+18}. Line #{offset+1}
    watches for a <code>keyup</code> event in the <code>math-input</code> box. When this occurs, line
    #{offset+2} stores the value of the <code>math-input</code> as a variable <code>math</code>.

    Line #{offset+5} checks if <code>math</code> has a non-zero length. If it does, then in lines
    #{offset+6}&ndash;#{offset+8}, MathLex tries to parse it into an abstract syntax <code>tree</code>
    structure and render that structure into <code>latex</code>. Then in line #{offset+9}, MathJax tries
    to display the <code>latex</code> in the <code>mjDisplayBox</code> (previously linked to the
    <code>math-display</code> box). If this fails, then the <code>math-input</code> box (since
    <code>this</code> represents the <code>math-input</code> box that's handling the <code>keyup</code>
    event).

    If <code>math</code> is empty (i.e. has zero length), then lines #{offset+14} to #{offset+16} blank
    out the <code>math-display</code> and <code>math-output</code> boxes.

  pre(class='brush: js; first-line: #{offset}').
    // "live update" MathJax whenever a key is pressed
    $('#math-input').on('keyup', function (evt) {
      var math = $(this).val();
      $(this).css('color', 'black');

      if (math.length > 0) {
        try {
          var tree = MathLex.parse(math),
              latex = MathLex.render(tree, 'latex');
          MathJax.Hub.Queue(['Text', mjDisplayBox, latex]);
        } catch (err) {
          $(this).css('color', 'red');
        }
      } else {
        // clear display and output boxes if input is empty
        MathJax.Hub.Queue(['Text', mjDisplayBox, '']);
        MathJax.Hub.Queue(['Text', mjOutBox, '']);
      }
    });

  offset = offset + 20
  p.
    <em>Step 8:</em> The last thing to do is listen to the <strong>Calculate</strong>
    button to send the <code>math-input</code> from line #{initOffset+2} to a Sage processor
    and display the result in the <code>math-output</code> box. We again use jQuery's DOM event
    handling system in lines #{offset} through #{offset+19}. Line #{offset} watches for a
    <code>click</code> event in the <code>send-math</code> button. When this occurs, line #{offset+1}
    stores the value of the <code>math-input</code> as a variable <code>math</code>. Line #{offset+2}
    checks if <code>math</code> has a non-zero length, and if it does, then, in lines
    #{offset+4}&ndash;#{offset+5}, MathLex tries to parse the <code>math</code> into a <code>tree</code>
    structure, render it into sage, and then store the result in a variable named <code>sageCode</code>.
    Then in line #{offset+6}, the <code>sageCode</code> is sent to a Sage server as an AJAX request.
    When the browser receives the AJAX response, it executes the associated function, passing it the
    received <code>data</code> (more about this in <a href="#step9">Step 9</a>). If the Sage execution
    was successful, then, on line #{offset+10}, MathJax displays the result (<code>data.stdout</code>)
    in the <code>mjOutBox</code> object (previously linked to the <code>math-output</code> box). If
    the server encountered an error, then line #{offset+12} displays "Sage could not understand that
    input" in the <code>mjOutBox</code>. If anything else fails (most likely a syntax error), line
    #{offset+16} displays "Check your syntax and try again" in the <code>mjOutBox</code>

  pre(class='brush: js; first-line: #{offset}').
    $('#send-math').on('click', function (evt) {
      var math = $('#math-input').val();
      if (math.length > 0) {
        try {
          var tree = MathLex.parse(math),
              sageCode = MathLex.render(tree, 'sage');
          $.post('http://aleph.sagemath.org/service?callback=?',
                 {code: 'print latex('+sageCode+')'}, function (data) {
            // AJAX success callback
            if (data.success) {
              MathJax.Hub.Queue(['Text', mjOutBox, data.stdout]);
            } else {
              MathJax.Hub.Queue(['Text', mjOutBox, '\\text{Sage could not understand that input}']);
            }
          });
        } catch (err) {
          MathJax.Hub.Queue(['Text', mjOutBox, '\\text{Check your syntax and try again}']);
        }
      }
    });

  p#step9.
    <em>Step 9</em>: Finally a few words about the Sage processing on line #{offset+8}:<br/>
    The demo communicates with a Sage Cell server at
    <a href="http://aleph.sagemath.org" target="_blank">http://aleph.sagemath.org</a>
    operated by the Sage Math organization. The POST request sends the Sage code
    <code>print latex(&lt;sageCode&gt;)</code>, where <code>sageCode</code> is the injected
    code generated by MathLex. Sage will evaluate the sent <code>sageCode</code>, simplify the
    result, convert it to LaTeX, and print it to the standard output (hence <code>stdout</code>).
    This output is passed back to the client in the form of a JSON object:

  pre(class='brush: js').
    {
      success: true|false,
      stdout: 'output string'
    }

  p.
    This value is stored as the <code>data</code> parameter to the AJAX callback function; so
    <code>data.success</code> on line #{offset+9} yields <code>true</code> or <code>false</code>
    and <code>data.stdout</code> yields the output string in LaTeX form (assuming
      <code>data.success</code> is true) to be processed by MathJax.

  h2 Additional Comments
  ul.p
    li Both of these event callbacks have the same basic abstract structure:
      ol
        li get MathLex code from the text field
        li parse the MathLex code into an abstract syntax tree
        li translate the syntax tree into another format (in the example, LaTeX or Sage code)
        li do something with the translated code

    li
      p.
        The value of the <code>math-input</code> text field was obtained above on line #{offset+2}
        using a <a href="http://jquery.com" target="_blank">jQuery</a> command of the form:

      pre(class='brush: js') var math = $('#' + inputID).val();

      p.
        where <code>inputID</code> stands for the input test field. In the example, this was
        <code>math-input</code>. However, there are many ways to obtain a text field's value. Here is
        the corresponding code for standard, plain, vanilla JavaScript and each of the JS libraries
        mentioned earlier:

      ol
        li
          p: Standard JavaScript:
          pre(class='brush: js') var math = document.getElementById(inputID).value;
        li
          p: a(href='http://mootools.net', target='_blank') MooTools
          pre(class='brush: js').
            var math = document.id(inputID).value;  // OR
            var math = $(inputID).value;            // '$' is aliased to 'document.id'
        li
          p: a(href='http://prototypejs.org', target='_blank') Prototype
          pre(class='brush: js') var math = $(inputID).value;
        li
          p: a(href='http://yuilibrary.com', target='_blank') YUI
          pre(class='brush: js') var math = Y.one('#' + inputID).get('value');
        li
          p: a(href='http://dojotoolkit.org', target='_blank') Dojo
          pre(class='brush: js') var math = dom.byId(inputID).value
      p.
        After any of these, <code>math</code> is now the name given to the MathLex input value, but
        you can use whatever name you want (as long as it's not a
        <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Reserved_Words" target="_blank">reserved keyword</a>).
    li
      p.
        Once you have some MathLex input, pass it to the <code>MathLex.parse()</code> function.
      pre(class='brush: js').
        // parse MathLex into an abstract syntax tree
        var syntaxTree = MathLex.parse(mathText);
      p.
        This will give back an abstract syntax tree representing the interpreted mathematical
        meaning that can then be rendered/translated into other formats. To improve your web
        page's performance, only parse the MathLex input once. The syntax tree can be used
        multiple times without the overhead of reinterpreting the input's meaning.

    li
      p Once you have a syntax tree, it can be rendered into several other formats. The general format is
      pre(class='brush: js') var formattedMathLex = MathLex.render(syntaxTree, targetFormat);
      p.
        Where <code>targetFormat</code> is a string containing the name of a renderer.
        There are currently three renderers included by default:
      ul
        li.
          <code>'latex'</code>: for use in typesetting (perhaps using
          <a href="#mathjax-integration">MathJax</a>.)
        li.
          <code>'sage'</code> (about 80% complete): Input language for the open source
          <a href="http://www.sagemanth.org" target="_blank">Sage computer algebra system</a>.
        li.
          <code>'text-tree'</code>: outputs a plain text indented tree representation of the abstract
          syntax tree (intended for debugging purposes).
      p.
        These Renderers simply walk through the syntax tree recursively, performing a certain action
        at each node. For more information on the provided renderers, please visit the
        <a href="doc.html">full documentation</a>. We are happy to collaborate on writing additional
        renderers or translators.

    li
      p.
        Once you have your desired translation, you can do whatever you want with it. Examples of the
        use of the <code>latex</code> and <code>sage</code> translations are included in the example
        above. Here is an example using the text-tree renderer:

      pre(class='brush: js').
        var treeCode  = MathLex.render(syntaxTree, 'text-tree');
        document.getElementById(outputID).innerHTML = treeCode;

  //-
    h2 Line 4: Rendering the Syntax Tree
    p <em>Step 10</em>: Once you have a syntax tree, it can be rendered into several other formats:

    pre(class='brush: html').
      <button onclick="renderMathLex('math-input', 'math-output')">
        Process MathLex
      </button>

    offset = 46
    p.
      In other words, imagine the contents of the <code>$('#send-math').on('click', function (evt) { ... });</code>
      block on lines #{offset}&ndash;#{offset+15} refactored into their own <code>renderMathLex()</code>
      function, which will be responsible for processing the mathematical input. The abstract actions
      taken by the callback are outlined below

    pre(class='brush: js').
      var renderMathLex = function (inputID, outputID) {
        // get MathLex from text field identified by `inputID` parameter
        // parse MathLex into an abstract syntax tree
        // render or translate the syntax tree into another format
        // do something with the translated math code
      }

    p.
      Each step of this function will be discussed in detail below. All discussed JavaScript code
      and referenced line numbers will now be confined within this function.

    h2 Line 2: Obtaining MathLex input
    p.
      <em>Step 8</em>: The value of the <code>math-input</code> text field is easy to obtain. The example
      above uses jQuery, but there are many ways to obtain a text field's value. Here is the corresponding
      code for each of the JS libraries mentioned earlier:

    pre(class='brush: js; highlight: [4,5]').
      // get MathLex from text field identified by `inputID` variable
      // in the example above, let inputID = 'math-input'

      // standard JS:
      var math = document.getElementById(inputID).value;

      // jQuery (see http://jquery.com):
      var math = $('#' + inputID).val();

      // MooTools (see http://mootools.net):
      var math = document.id(inputID).value;  // OR
      var math = $(inputID).value;            // '$' is aliased to 'document.id'

      // Prototype (see http://prototypejs.org):
      var math = $(inputID).value;

      // YUI (see http://yuilibrary.com):
      var math = Y.one('#' + inputID).get('value');

      // Dojo (see http://dojotoolkit.org):
      var math = dom.byId(inputID).value;

    p.
      <code>math</code> is now the name given to the MathLex input value, but you can use whatever name
      you want as long as it's not a <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Reserved_Words" target="_blank">reserved keyword</a>.

    //- h2 Line 3: Parsing MathLex Input
    p <em>Step 9</em>: Once you have some MathLex input, pass it to the <code>MathLex.parse()</code> function.
    pre(class='brush: js').
      // parse MathLex into an abstract syntax tree
      var syntaxTree = MathLex.parse(mathText);
    p.
      This will give back an abstract syntax tree representing the interpreted mathematical
      meaning that can then be rendered/translated into other formats. To improve your web
      page's performance, only parse the MathLex input once. The syntax tree can be used
      multiple times without the overhead of reinterpreting the input's meaning.

    //- h2 Line 4: Rendering the Syntax Tree
    p <em>Step 10</em>: Once you have a syntax tree, it can be rendered into several other formats:

    pre(class='brush: js').
      // render or translate the syntax tree into another format
      var formattedMathLex = MathLex.render(syntaxTree, targetFormat);
    p.
      Where <code>targetFormat</code> is a string containing the name of a renderer.
      There are currently three renderers included by default:
    ul
      li.
        <code>'latex'</code>: for use in typesetting (perhaps using
        <a href="#mathjax-integration">MathJax</a>.)
      li.
        <code>'sage'</code> (about 80% complete): Input language for the open source
        <a href="http://www.sagemanth.org" target="_blank">Sage computer algebra system</a>.
      li.
        <code>'text-tree'</code>: outputs a plain text indented tree representation of the abstract
        syntax tree (intended for debugging purposes).
    p.
      Renderers simply walk through the syntax tree recursively, performing a certain action at each
      node. You can look at the provided renderers in the <code>src/render</code> directory and even
      build your own. A list of all node types produced by the parser is included in
      <a href="doc.html#appendix-b">Appendix B</a> of the full documentation.

  //-
    h2 Line 5: Doing Something with Rendered MathLex
    p If you've been coding along, your JavaScript function should look something like this:
    pre(class='brush: js').
      var renderMathLex = function (inputID, outputID) {
        // get MathLex from text field identified by `inputID` parameter
        var mathText = document.getElementById(inputID).value;

        // parse MathLex into an abstract syntax tree
        var syntaxTree = MathLex.parse(mathText);

        // render or translate the syntax tree into another format
        // do something with the translated math code
      }
    p.
      <em>Step 11</em>: Once you have your desired translation, you can do whatever you want with it.
      Below is a sample use case for each renderer:

    .tabs
      nav: ul
          li: a(href='#text-tree') Simple Text Tree
          li: a(href='#sage-jquery') Sage Cell and jQuery AJAX JSONP
          li: a(href='#latex-mathjax') LaTeX and MathJax
      .content
        #text-tree: pre(class='brush: js').
          var treeCode  = MathLex.render(syntaxTree, 'text-tree');
          document.getElementById(outputID).innerHTML = treeCode;

        #sage-jquery
          pre(class='brush: js').
            var sageCode  = MathLex.render(syntaxTree, 'sage');
            $.post('http://aleph.sagemath.org/service?callback=?', {code: 'print ' + sageCode}, function (data) {
              // data = { success: true|false, stdout: '[output string]' }
              if (data.success) {
                // do something with data.stdout
              }
            });
          p.
            For more information, visit the "Blocking web service" section of the
            <a href="https://github.com/sagemath/sagecell/wiki/Messages" target="_blank">Sage Cell documentation</a>.

        #latex-mathjax: pre(class='brush: js').
          var latexCode = MathLex.render(syntaxTree, 'latex');

          var mjQueue = MathJax.Hub.queue;
          mjQueue.Push(function () {
            var mjOutBox = MathJax.Hub.getAllJax(outputID)[0];
            mjQueue.Push(['Text', mjOutBox, latexCode]);
          });

  p Want to know more? <a href="doc.html">Read the full documentation</a>.


block javascripts
    script(src='javascripts/lib/syntaxhighlighter/scripts/XRegExp.js')
    script(src='javascripts/lib/syntaxhighlighter/scripts/shCore.js')
    script(src='javascripts/lib/syntaxhighlighter/scripts/shAutoloader.js')
    script(src='javascripts/jquery.tabs.js')
    :coffeescript
      $ -> $('.tabs').tabs()

    script(src='javascripts/mathlex.js')
    script(src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML')
    :coffeescript
      $ ->
        mjDisplayBox = mjOutBox = null
        MathJax.Hub.Queue ->
          mjDisplayBox = MathJax.Hub.getAllJax('math-display')[0]
          mjOutBox = MathJax.Hub.getAllJax('math-output')[0]

        $('#math-input').on 'keyup', (evt) ->
          math = $(@).val()
          $(@).css color: 'black'
          if math.length > 0
            try
              tree = MathLex.parse math
              latex = MathLex.render tree, 'latex'
              MathJax.Hub.Queue ['Text', mjDisplayBox, latex]
            catch err
              $(@).css color: 'red'
          else
            MathJax.Hub.Queue ['Text', mjDisplayBox, '']
            MathJax.Hub.Queue ['Text', mjOutBox, '']
        $('#send-math').on 'click', (evt) ->
          math = $('#math-input').val()
          if math.length > 0
            try
              tree = MathLex.parse math
              sageCode = MathLex.render tree, 'sage'
              $.post 'http://aleph.sagemath.org/service?callback=?', {code: "print latex(#{sageCode})"}, (data) ->
                if data.success
                  MathJax.Hub.Queue ['Text', mjOutBox, data.stdout]
                else
                  MathJax.Hub.Queue ['Text', mjOutBox, '\\text{Sage could not understand that input}']
            catch err
              MathJax.Hub.Queue ['Text', mjOutBox, '\\text{Check your syntax and try again}']
